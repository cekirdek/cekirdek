Fonksiyon_01OperatörFonksiyon[i64 * i64]
	Cümle_07Assembly[mov rax, değer1
	mul değer2
	mov çarpım, rax]
Fonksiyon_01OperatörFonksiyon[i64 // i64]
	Cümle_07Assembly[mov rdx, 0
	mov rax, değer1
	div değer2
	mov bölüm, rax]
Fonksiyon_01OperatörFonksiyon[i64 + i64]
	Cümle_07Assembly[mov toplam, değer1
	add toplam, değer2]
Fonksiyon_01OperatörFonksiyon[i64 - i64]
	Cümle_07Assembly[mov fark, değer1
	sub fark, değer2]
Fonksiyon_02İsimliFonksiyon[exit]
	Cümle_07Assembly[xor rdi,rdi	# 0
	mov rax,60	# exit (60)
	syscall
	ret]
Fonksiyon_02İsimliFonksiyon[printhn]
	Cümle_08AssemblyData[enter:
	.octa	0
	.byte	10]
	Cümle_09AssemblyRoData[.hex:
	.string	"0123456789ABCDEF"]
	Cümle_07Assembly[mov rcx, 0
döngü:
	rol değer, 4
	mov rdx, değer
	and rdx, 0x0F
	mov dil, [.hex+rdx]
	mov [enter+rcx], dil
	inc rcx
	cmp rcx, 16
	jnz döngü

	mov rdx, 17		# 
	lea	rsi, enter	# 
	mov rdi, 1		# file descriptor : 1 - standard output
	mov rax, 1		# system call : write (1)
	syscall			# Call the kernel
	ret]
Fonksiyon_03AnaFonksiyon[]
	Cümle_01DeğişkenYeni[değer1 i64 > 1]
	Cümle_05SabitAtama[111 i64 > 1]
	Cümle_01DeğişkenYeni[değer2 i64 > 2]
	Cümle_05SabitAtama[222 i64 > 2]
	Cümle_01DeğişkenYeni[sayı1 i64 > 3]
	Cümle_05SabitAtama[64 i64 > 3]
	Cümle_06DeğişkenAtama[1 > 3]
	Cümle_06DeğişkenAtama[2 > 3]
	Cümle_04FonksiyonÇağrısı[printhn(3) > -1]
	Cümle_06DeğişkenAtama[1 > 3]
	Cümle_06DeğişkenAtama[2 > 3]
